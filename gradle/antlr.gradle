buildscript {
  dependencies {
    classpath files("$rootDir/libs/antlr-4.4-complete.jar")
  }
}


import groovy.io.FileType
import org.antlr.v4.Tool
import org.antlr.v4.codegen.CodeGenerator

def output = file("src/main/antlr/gen")
def input = file("src/main/antlr/Clojure.g4")

if (!input.exists()) {
  throw new GradleException("Grammar file invalid")
}

task generateClosureParser(description: "Generate clojure parser") << {
  println "Loading grammar"
  def pckg = "com.stanfy.icfp2014.clojure"
  def tool = new Tool(
      [
          "-o", output.absolutePath + "/" + pckg.replaceAll("\\.", "/"),
          "-package", pckg,
          input.absolutePath
      ] as String[]
  )
  tool.processGrammarsOnCommandLine()
//  tool.outputDirectory = output.absolutePath
//  def grammar = tool.loadGrammar(input.absolutePath)
//  tool.process(grammar, true)
//  output.mkdirs()
//  input.parentFile.eachFile(FileType.FILES) {
//    if (it.name.endsWith('.tokens') || it.name.endsWith('.java')) {
//      it.renameTo(new File(output, it.name))
//    }
//  }
  println "Done"
}

def inputEcmascript = file("src/main/antlr/ECMAScript.g4")

task generateECMAScriptParser(description: "Generate ECMAScript parser") << {
    println "Loading grammar"
    def pckg = "com.stanfy.icfp2014.ecmascript4"
    def tool = new Tool(
            [
                    "-o", output.absolutePath + "/" + pckg.replaceAll("\\.", "/"),
                    "-package", pckg,
                    inputEcmascript.absolutePath
            ] as String[]
    )
    tool.processGrammarsOnCommandLine()
//  tool.outputDirectory = output.absolutePath
//  def grammar = tool.loadGrammar(input.absolutePath)
//  tool.process(grammar, true)
//  output.mkdirs()
//  input.parentFile.eachFile(FileType.FILES) {
//    if (it.name.endsWith('.tokens') || it.name.endsWith('.java')) {
//      it.renameTo(new File(output, it.name))
//    }
//  }
    println "Done"
}

sourceSets {
  main {
    java { srcDirs += output }
  }
}

dependencies {
  compile files("$rootDir/libs/antlr-4.4-complete.jar")
}

// ==== clean =====
task cleanAntlr(type: Delete) {
  delete output
}
clean.dependsOn cleanAntlr
