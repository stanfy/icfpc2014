; ghost-functions

; ------------------------- 
; calculate path score from cell1 to cell2 
; in:
; 240(x1), 241(y1), 250(x2), 251(y2)
; out:
; path score in A
FN_PATH_SCORES_BETWEEN_CELLS:

mov a, [240]   ; X1 ---> a
sub a, [250]   ; X1 - X2
jgt FN_PATH_OK_1, [240], [250]
mov a, [250]
sub a, [240]

FN_PATH_OK_1:
div a, 2       ; (X1 - X2) / 2

mov b, [241]   ; Y1 ---> b
sub b, [251]   ; Y1 - Y2
jgt FN_PATH_OK_2, [241], [251]
mov b, [251]
sub b, [241]

FN_PATH_OK_2:
div b, 2       ; (Y1 - Y2) / 2

add a, b       ; path scores

RETURN



; ------------------------- 
; get cell content
; in:
; 240(direction)
; out:
; cell content in A
; cell -- 240(x), 241(y)
FN_CONTENT_CELL_ON_DIRECTION:

; Save current ghost direction
int 3          ; ghost index --> A
int 5          ; x ---> A, y ---> B

mov c, [240]   ; direction --> C

jeq PATH_UP, c, DIRECTION_UP
jeq PATH_RIGHT, c, DIRECTION_RIGHT
jeq PATH_DOWN, c, DIRECTION_DOWN
jeq PATH_LEFT, c, DIRECTION_LEFT

PATH_UP:
sub b, 1       ; Y-1
jeq JUMP_P, 1, 1

PATH_RIGHT:
add a, 1       ; X+1
jeq JUMP_P, 1, 1

PATH_DOWN:
add b, 1       ; Y+1
jeq JUMP_P, 1, 1

PATH_LEFT:
sub a, 1       ; X-1
jeq JUMP_P, 1, 1

JUMP_P:
mov [240], a
mov [241], b
int 7		   ; A (X), B(Y) --> CONTENT
RETURN





; -------------------------------  SELECT DESTINATION
; in:
; [0] - REG_STATE
; [1] - REG_CNT
; [2] - REG_NC (next corner)
; [3] - REG_FR (first run)
;
; [10] - REG_DEST_CELL_X
; [11] - REG_DEST_CELL_Y
;
; out:
; dest cell coordinates in REG_DEST_CELL_X, REG_DEST_CELL_Y
;
; [0] --- current state
;  == 0 -- moving to LM
;  == 1 -- moving to Corner 1
;  == 2 -- moving to Corner 2
;  == 3 -- moving to Corner 3
;  == 4 -- moving to Corner 4

; [1] --- counter
; [2] --- next Corner  0, 1, 2, 3
;
;  10 --- steps to Corner
;  20 --- steps to LM


FN_SELECT_DESTINATION:

; ---- remember current LM
int 1		   			   ; LM coordinate
mov REG_LM_CELL_X, A	   ; LM x
mov REG_LM_CELL_Y, B       ; LM y

; ---- check counter

jeq ZERO_COUNTER, REG_CNT, 0       ; check counter
sub REG_CNT, 1					   ; counter > 0
jeq CHECK_STATE, 1, 1

; ---- counter == 0
ZERO_COUNTER:
jeq ZERO_STATE, REG_STATE, 0        ; check state
mov REG_STATE, 0                    ; move to LM
mov REG_CNT, REG_STEP_CHASE         ; move number of steps from REG_STEP_CHASE
jeq CHECK_STATE, 1, 1

ZERO_STATE:
inc REG_NC
mov REG_STATE, REG_NC
and REG_NC, 3
mov REG_CNT, REG_STEP_SCATTER       ; move number of steps from REG_STEP_SCATTER
jeq CHECK_STATE, 1, 1


; ---- counter > 0
CHECK_STATE:

jeq RUN_TO_LM, REG_STATE, 0         ; move to LM
jeq RUN_TO_CORNER_1, REG_STATE, 1 
jeq RUN_TO_CORNER_2, REG_STATE, 2 
jeq RUN_TO_CORNER_3, REG_STATE, 3 
jeq RUN_TO_CORNER_4, REG_STATE, 4 


; ------------ MOVING TO LM
RUN_TO_LM:

int 1		   			   ; LM coordinate
mov REG_DEST_CELL_X, A	   ; LM x
mov REG_DEST_CELL_Y, B     ; LM y

jeq START_MOVING, REG_RUN_TO_LM_DIST, 0

; ---- calculate LM direction
; TODO: fix overflow on add and sub

; --- assume going right
mov a, DIRECTION_RIGHT
mov [230], REG_DEST_CELL_X
add [230], REG_RUN_TO_LM_DIST    ; x + dist
jgt OV_1, [230], REG_DEST_CELL_X
mov [230], 255                   ; fix overflow
OV_1:
mov [231], REG_DEST_CELL_Y       ; y
jlt FN_GET_CELL_BY_DIRECTION, REG_PLM_CELL_X, REG_DEST_CELL_X

; --- assume going left
mov a, DIRECTION_LEFT
mov [230], REG_DEST_CELL_X
sub [230], REG_RUN_TO_LM_DIST    ; x - dist
jlt OV_2, [230], REG_DEST_CELL_X
mov [230], 0                     ; fix overflow
OV_2:
mov [231], REG_DEST_CELL_Y       ; y
jlt FN_GET_CELL_BY_DIRECTION, REG_DEST_CELL_X, REG_PLM_CELL_X

; --- assume going down
mov a, DIRECTION_DOWN
mov [230], REG_DEST_CELL_X       ; x
mov [231], REG_DEST_CELL_Y
add [231], REG_RUN_TO_LM_DIST    ; y + dist
jgt OV_3, [231], REG_DEST_CELL_Y
mov [231], 255                   ; fix overflow
OV_3:
jlt FN_GET_CELL_BY_DIRECTION, REG_PLM_CELL_Y, REG_DEST_CELL_Y

; --- assume going up
mov a, DIRECTION_UP
mov [230], REG_DEST_CELL_X       ; x
mov [231], REG_DEST_CELL_Y  
sub [231], REG_RUN_TO_LM_DIST    ; y - dist
jlt OV_4, [231], REG_DEST_CELL_Y
mov [231], 0                     ; fix overflow
OV_4:
jlt FN_GET_CELL_BY_DIRECTION, REG_DEST_CELL_Y, REG_PLM_CELL_Y

jeq START_MOVING, 1, 1

FN_GET_CELL_BY_DIRECTION:
mov REG_DEST_CELL_X, [230]
mov REG_DEST_CELL_Y, [231]

jeq START_MOVING, 1, 1


; ------------ MOVING TO CORNER 1
RUN_TO_CORNER_1:
mov REG_DEST_CELL_X, 0	   
mov REG_DEST_CELL_Y, 0    
jeq START_MOVING, 1, 1

; ------------ MOVING TO CORNER 2
RUN_TO_CORNER_2:
mov REG_DEST_CELL_X, 255	   
mov REG_DEST_CELL_Y, 0  
jeq START_MOVING, 1, 1

; ----------- MOVING TO CORNER 3
RUN_TO_CORNER_3:
mov REG_DEST_CELL_X, 255	   
mov REG_DEST_CELL_Y, 255 
jeq START_MOVING, 1, 1

; ----------- MOVING TO CORNER 4
RUN_TO_CORNER_4:
mov REG_DEST_CELL_X, 0	   
mov REG_DEST_CELL_Y, 255   
jeq START_MOVING, 1, 1

START_MOVING:

; ----- save LM coordinate
int 1		   			   ; LM coordinate
mov REG_PLM_CELL_X, A	   ; LM x
mov REG_PLM_CELL_Y, B      ; LM y 

RETURN


; ------------------------------------------------  CHECK FIRST RUN
FN_CHECK_FIRST_RUN:

jeq FN_CH_F_R_EXIT, REG_FR, 1 
; if first run:
int 3          ; ghost index --> A

jeq FN_G_IDX_0, A, 0
jeq FN_G_IDX_1, A, 1
jeq FN_G_IDX_2, A, 2
jeq FN_G_IDX_3, A, 3

; --------- ghost 0
FN_G_IDX_0:
mov REG_STEP_CHASE, 30
mov REG_STEP_SCATTER, 10
mov REG_STATE, 0           ; starts from running to LM
mov REG_NC, 0              ; next corner
mov REG_CNT, REG_STEP_CHASE
mov REG_RUN_TO_LM_DIR, 0   ; run on LM
mov REG_RUN_TO_LM_DIST, 0
jeq FN_G_EXIT, 1, 1

; --------- ghost 1
FN_G_IDX_1:
mov REG_STEP_CHASE, 20
mov REG_STEP_SCATTER, 7
mov REG_STATE, 2           ; starts from running to corner 2
mov REG_NC, 2              ; next corner 3
mov REG_CNT, REG_STEP_SCATTER
mov REG_RUN_TO_LM_DIR, 0   ; run towards LM 
mov REG_RUN_TO_LM_DIST, 2  ; on 2 steps
jeq FN_G_EXIT, 1, 1

; --------- ghost 2
FN_G_IDX_2:
mov REG_STEP_CHASE, 20
mov REG_STEP_SCATTER, 5
mov REG_STATE, 0           ; starts from running to LM
mov REG_NC, 2              ; next corner 3
mov REG_CNT, REG_STEP_CHASE
mov REG_RUN_TO_LM_DIR, 2   ; run behind LM
mov REG_RUN_TO_LM_DIST, 2  ; on 2 steps
jeq FN_G_EXIT, 1, 1

; --------- ghost 3
FN_G_IDX_3:
mov REG_STEP_CHASE, 12
mov REG_STEP_SCATTER, 10
mov REG_STATE, 4           ; starts from running to corner 2
mov REG_NC, 0              ; next corner 1
mov REG_CNT, REG_STEP_SCATTER
mov REG_RUN_TO_LM_DIR, 0   ; run on LM
mov REG_RUN_TO_LM_DIST, 0
jeq FN_G_EXIT, 1, 1


FN_G_EXIT:
; ----- remember that it was first run
mov REG_FR, 1

; ----- save LM coordinate
int 1		   			   ; LM coordinate
mov REG_PLM_CELL_X, A	   ; LM x
mov REG_PLM_CELL_Y, B      ; LM y 

FN_CH_F_R_EXIT:
RETURN

hlt
