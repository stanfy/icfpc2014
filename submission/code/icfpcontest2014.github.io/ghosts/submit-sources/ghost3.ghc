mov h, pc
add h, 3
mov pc, 151 ; FN_CHECK_FIRST_RUN

mov h, pc
add h, 3
mov pc, 79 ; FN_SELECT_DESTINATION

int 3                  ; ghost index --> A
int 6                  ; get current ghost direction
mov [16], B       ; save current direction ; REG_G_DIR
mov [17], A       ; save current direction ; REG_G_VIT

mov E, 255     ; candidate direction (min direction --> E)

mov D, 0       ; max path score -- fright mode

jeq 14, [17], 1   ; VIT_40_MODE ; REG_G_VIT ; LOOP ; FRIGHT
mov D, 255     ; min path score -- usual mode

; -- FUNC LOOP
inc E

mov F, E
add F, 2
and F, 3
jeq 44, [16], F ; REG_G_DIR ; END_L

mov [240], E
mov h, pc
add h, 3
mov pc, 60 ; FN_CONTENT_CELL_ON_DIRECTION

jeq 44, A, 0 ; CELL_WALL ; END_L

mov [250], [10] ; REG_DEST_CELL_X
mov [251], [11]  ; REG_DEST_CELL_Y
mov h, pc
add h, 3
mov pc, 46 ; FN_PATH_SCORES_BETWEEN_CELLS

jeq 44, A, D ; END_L

jeq 40, [17], 1  ; VIT_FRIGHT_MODE ; REG_G_VIT ; FRIGHT


jeq 33, [240], [18] ; REG_LM_CELL_X ; CHECK_LM_Y
jeq 38, 1, 1 ; LM_IS_NOT_CLOSE

; -- FUNC CHECK_LM_Y
jeq 35, [241], [19] ; REG_LM_CELL_Y ; LM_IS_CLOSE
jeq 38, 1, 1 ; LM_IS_NOT_CLOSE

; -- FUNC LM_IS_CLOSE
mov A, E
int 0
hlt

; -- FUNC LM_IS_NOT_CLOSE
jgt 44, A, D  					; if current score is less than score in D ; END_L
jeq 41, 1, 1 ; REMEMBER_SCORE

; -- FUNC FRIGHT
jlt 44, A, D  					; if current score is greather than score in D ; END_L

; -- FUNC REMEMBER_SCORE
mov D, A
mov A, E
int 0

; -- FUNC END_L
jlt 14, E, 3  ; LOOP

hlt



; -- FUNC FN_PATH_SCORES_BETWEEN_CELLS
mov a, [240]   ; X1 ---> a
sub a, [250]   ; X1 - X2
jgt 51, [240], [250] ; FN_PATH_OK_1
mov a, [250]
sub a, [240]

; -- FUNC FN_PATH_OK_1
div a, 2       ; (X1 - X2) / 2

mov b, [241]   ; Y1 ---> b
sub b, [251]   ; Y1 - Y2
jgt 57, [241], [251] ; FN_PATH_OK_2
mov b, [251]
sub b, [241]

; -- FUNC FN_PATH_OK_2
div b, 2       ; (Y1 - Y2) / 2

add a, b       ; path scores

mov pc, h




; -- FUNC FN_CONTENT_CELL_ON_DIRECTION
int 3          ; ghost index --> A
int 5          ; x ---> A, y ---> B

mov c, [240]   ; direction --> C

jeq 67, c, 0 ; DIRECTION_UP ; PATH_UP
jeq 69, c, 1 ; DIRECTION_RIGHT ; PATH_RIGHT
jeq 71, c, 2 ; DIRECTION_DOWN ; PATH_DOWN
jeq 73, c, 3 ; DIRECTION_LEFT ; PATH_LEFT

; -- FUNC PATH_UP
sub b, 1       ; Y-1
jeq 75, 1, 1 ; JUMP_P

; -- FUNC PATH_RIGHT
add a, 1       ; X+1
jeq 75, 1, 1 ; JUMP_P

; -- FUNC PATH_DOWN
add b, 1       ; Y+1
jeq 75, 1, 1 ; JUMP_P

; -- FUNC PATH_LEFT
sub a, 1       ; X-1
jeq 75, 1, 1 ; JUMP_P

; -- FUNC JUMP_P
mov [240], a
mov [241], b
int 7		   ; A (X), B(Y) --> CONTENT
mov pc, h









; -- FUNC FN_SELECT_DESTINATION
int 1		   			   ; LM coordinate
mov [18], A	   ; LM x ; REG_LM_CELL_X
mov [19], B       ; LM y ; REG_LM_CELL_Y


jeq 85, [1], 0       ; check counter ; REG_CNT ; ZERO_COUNTER
sub [1], 1					   ; counter > 0 ; REG_CNT
jeq 94, 1, 1 ; CHECK_STATE

; -- FUNC ZERO_COUNTER
jeq 89, [0], 0        ; check state ; REG_STATE ; ZERO_STATE
mov [0], 0                    ; move to LM ; REG_STATE
mov [1], [20]         ; move number of steps from REG_STEP_CHASE ; REG_CNT ; REG_STEP_CHASE
jeq 94, 1, 1 ; CHECK_STATE

; -- FUNC ZERO_STATE
inc [2] ; REG_NC
mov [0], [2] ; REG_STATE ; REG_NC
and [2], 3 ; REG_NC
mov [1], [21]       ; move number of steps from REG_STEP_SCATTER ; REG_CNT ; REG_STEP_SCATTER
jeq 94, 1, 1 ; CHECK_STATE



; -- FUNC CHECK_STATE
jeq 99, [0], 0         ; move to LM ; REG_STATE ; RUN_TO_LM
jeq 135, [0], 1  ; REG_STATE ; RUN_TO_CORNER_1
jeq 138, [0], 2  ; REG_STATE ; RUN_TO_CORNER_2
jeq 141, [0], 3  ; REG_STATE ; RUN_TO_CORNER_3
jeq 144, [0], 4  ; REG_STATE ; RUN_TO_CORNER_4



; -- FUNC RUN_TO_LM
int 1		   			   ; LM coordinate
mov [10], A	   ; LM x ; REG_DEST_CELL_X
mov [11], B     ; LM y ; REG_DEST_CELL_Y

jeq 147, [15], 0 ; REG_99_DIST ; RUN_TO_LM ; START_MOVING


mov a, 1 ; DIRECTION_RIGHT
mov [230], [10] ; REG_DEST_CELL_X
add [230], [15]    ; x + dist ; REG_99_DIST ; RUN_TO_LM
jgt 108, [230], [10] ; REG_DEST_CELL_X ; OV_1
mov [230], 255                   ; fix overflow
; -- FUNC OV_1
mov [231], [11]       ; y ; REG_DEST_CELL_Y
jlt 132, [12], [10] ; REG_DEST_CELL_X ; REG_PLM_CELL_X ; FN_GET_CELL_BY_DIRECTION

mov a, 3 ; DIRECTION_LEFT
mov [230], [10] ; REG_DEST_CELL_X
sub [230], [15]    ; x - dist ; REG_99_DIST ; RUN_TO_LM
jlt 115, [230], [10] ; REG_DEST_CELL_X ; OV_2
mov [230], 0                     ; fix overflow
; -- FUNC OV_2
mov [231], [11]       ; y ; REG_DEST_CELL_Y
jlt 132, [10], [12] ; REG_DEST_CELL_X ; REG_PLM_CELL_X ; FN_GET_CELL_BY_DIRECTION

mov a, 2 ; DIRECTION_DOWN
mov [230], [10]       ; x ; REG_DEST_CELL_X
mov [231], [11] ; REG_DEST_CELL_Y
add [231], [15]    ; y + dist ; REG_99_DIST ; RUN_TO_LM
jgt 123, [231], [11] ; REG_DEST_CELL_Y ; OV_3
mov [231], 255                   ; fix overflow
; -- FUNC OV_3
jlt 132, [13], [11] ; REG_DEST_CELL_Y ; REG_PLM_CELL_Y ; FN_GET_CELL_BY_DIRECTION

mov a, 0 ; DIRECTION_UP
mov [230], [10]       ; x ; REG_DEST_CELL_X
mov [231], [11]   ; REG_DEST_CELL_Y
sub [231], [15]    ; y - dist ; REG_99_DIST ; RUN_TO_LM
jlt 130, [231], [11] ; REG_DEST_CELL_Y ; OV_4
mov [231], 0                     ; fix overflow
; -- FUNC OV_4
jlt 132, [11], [13] ; REG_DEST_CELL_Y ; REG_PLM_CELL_Y ; FN_GET_CELL_BY_DIRECTION

jeq 147, 1, 1 ; START_MOVING

; -- FUNC FN_GET_CELL_BY_DIRECTION
mov [10], [230] ; REG_DEST_CELL_X
mov [11], [231] ; REG_DEST_CELL_Y

jeq 147, 1, 1 ; START_MOVING


; -- FUNC RUN_TO_CORNER_1
mov [10], 0	    ; REG_DEST_CELL_X
mov [11], 0     ; REG_DEST_CELL_Y
jeq 147, 1, 1 ; START_MOVING

; -- FUNC RUN_TO_CORNER_2
mov [10], 255	    ; REG_DEST_CELL_X
mov [11], 0   ; REG_DEST_CELL_Y
jeq 147, 1, 1 ; START_MOVING

; -- FUNC RUN_TO_CORNER_3
mov [10], 255	    ; REG_DEST_CELL_X
mov [11], 255  ; REG_DEST_CELL_Y
jeq 147, 1, 1 ; START_MOVING

; -- FUNC RUN_TO_CORNER_4
mov [10], 0	    ; REG_DEST_CELL_X
mov [11], 255    ; REG_DEST_CELL_Y
jeq 147, 1, 1 ; START_MOVING


; -- FUNC START_MOVING
int 1		   			   ; LM coordinate
mov [12], A	   ; LM x ; REG_PLM_CELL_X
mov [13], B      ; LM y  ; REG_PLM_CELL_Y

mov pc, h



; -- FUNC FN_CHECK_FIRST_RUN
jeq 193, [3], 1  ; REG_FR ; FN_CH_F_R_EXIT
int 3          ; ghost index --> A

jeq 157, A, 0 ; FN_G_IDX_0
jeq 165, A, 1 ; FN_G_IDX_1
jeq 173, A, 2 ; FN_G_IDX_2
jeq 181, A, 3 ; FN_G_IDX_3

; -- FUNC FN_G_IDX_0
mov [20], 30 ; REG_STEP_CHASE
mov [21], 10 ; REG_STEP_SCATTER
mov [0], 0           ; starts from running to LM ; REG_STATE
mov [2], 2              ; next corner 2 ; REG_NC
mov [1], [20] ; REG_CNT ; REG_STEP_CHASE
mov [14], 0   ; run on LM ; REG_99_DIR ; RUN_TO_LM
mov [15], 0 ; REG_99_DIST ; RUN_TO_LM
jeq 189, 1, 1 ; FN_G_EXIT

; -- FUNC FN_G_IDX_1
mov [20], 30 ; REG_STEP_CHASE
mov [21], 7 ; REG_STEP_SCATTER
mov [0], 4           ; starts from running to corner 3 ; REG_STATE
mov [2], 1              ; next corner 1 ; REG_NC
mov [1], [21] ; REG_CNT ; REG_STEP_SCATTER
mov [14], 0   ; run on LM  ; REG_99_DIR ; RUN_TO_LM
mov [15], 0  ; on 2 steps ; REG_99_DIST ; RUN_TO_LM
jeq 189, 1, 1 ; FN_G_EXIT

; -- FUNC FN_G_IDX_2
mov [20], 25 ; REG_STEP_CHASE
mov [21], 8 ; REG_STEP_SCATTER
mov [0], 0           ; starts from running to LM ; REG_STATE
mov [2], 1              ; next corner 1 ; REG_NC
mov [1], [20] ; REG_CNT ; REG_STEP_CHASE
mov [14], 0   ; run towards LM ; REG_99_DIR ; RUN_TO_LM
mov [15], 2  ; on 2 steps ; REG_99_DIST ; RUN_TO_LM
jeq 189, 1, 1 ; FN_G_EXIT

; -- FUNC FN_G_IDX_3
mov [20], 24 ; REG_STEP_CHASE
mov [21], 8 ; REG_STEP_SCATTER
mov [0], 1           ; starts from running to corner 1 ; REG_STATE
mov [2], 3              ; next corner 3 ; REG_NC
mov [1], [21] ; REG_CNT ; REG_STEP_SCATTER
mov [14], 2   ; run behind LM ; REG_99_DIR ; RUN_TO_LM
mov [15], 2  ; on 2 steps ; REG_99_DIST ; RUN_TO_LM
jeq 189, 1, 1 ; FN_G_EXIT


; -- FUNC FN_G_EXIT
mov [3], 1 ; REG_FR

int 1		   			   ; LM coordinate
mov [12], A	   ; LM x ; REG_PLM_CELL_X
mov [13], B      ; LM y  ; REG_PLM_CELL_Y

; -- FUNC FN_CH_F_R_EXIT
mov pc, h

hlt
